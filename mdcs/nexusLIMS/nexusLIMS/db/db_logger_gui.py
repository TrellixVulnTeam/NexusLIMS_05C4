#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
#  NIST Public License - 2019
#
#  This software was developed by employees of the National Institute of
#  Standards and Technology (NIST), an agency of the Federal Government
#  and is being made available as a public service. Pursuant to title 17
#  United States Code Section 105, works of NIST employees are not subject
#  to copyright protection in the United States.  This software may be
#  subject to foreign copyright.  Permission in the United States and in
#  foreign countries, to the extent that NIST may hold copyright, to use,
#  copy, modify, create derivative works, and distribute this software and
#  its documentation without fee is hereby granted on a non-exclusive basis,
#  provided that this notice and disclaimer of warranty appears in all copies.
#
#  THE SOFTWARE IS PROVIDED 'AS IS' WITHOUT ANY WARRANTY OF ANY KIND,
#  EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
#  TO, ANY WARRANTY THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
#  IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
#  AND FREEDOM FROM INFRINGEMENT, AND ANY WARRANTY THAT THE DOCUMENTATION
#  WILL CONFORM TO THE SOFTWARE, OR ANY WARRANTY THAT THE SOFTWARE WILL BE
#  ERROR FREE.  IN NO EVENT SHALL NIST BE LIABLE FOR ANY DAMAGES, INCLUDING,
#  BUT NOT LIMITED TO, DIRECT, INDIRECT, SPECIAL OR CONSEQUENTIAL DAMAGES,
#  ARISING OUT OF, RESULTING FROM, OR IN ANY WAY CONNECTED WITH THIS SOFTWARE,
#  WHETHER OR NOT BASED UPON WARRANTY, CONTRACT, TORT, OR OTHERWISE, WHETHER
#  OR NOT INJURY WAS SUSTAINED BY PERSONS OR PROPERTY OR OTHERWISE, AND
#  WHETHER OR NOT LOSS WAS SUSTAINED FROM, OR AROSE OUT OF THE RESULTS OF,
#  OR USE OF, THE SOFTWARE OR SERVICES PROVIDED HEREUNDER.
#

# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Dec 04, 2019 03:30:55 PM MST  platform: Linux

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import db_logger_gui_support
import os.path


def vp_start_gui():
    """Starting point when module is the main routine."""
    global val, w, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    root = tk.Tk()
    top = Toplevel1(root)
    db_logger_gui_support.init(root, top)
    root.mainloop()

w = None


def create_Toplevel1(root, *args, **kwargs):
    """Starting point when module is imported by another program."""
    global w, w_win, rt
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    rt = root
    w = tk.Toplevel(root)
    top = Toplevel1(w)
    db_logger_gui_support.init(w, top, *args, **kwargs)
    return w, top


def destroy_Toplevel1():
    global w
    w.destroy()
    w = None


class Toplevel1:
    def __init__(self, top=None):
        """This class configures and populates the toplevel window.
           top is the toplevel containing window."""
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.',
                       background=[('selected', _compcolor),
                                   ('active', _ana2color)])

        top.geometry("300x450+538+141")
        top.minsize(1, 1)
        top.maxsize(3840, 1170)
        top.resizable(0, 0)
        top.title("NexusLIMS Session Logger")
        top.configure(highlightcolor="black")

        self.TLabel1 = ttk.Label(top)
        self.TLabel1.place(relx=0.143, rely=0.056, height=100, width=250)
        self.TLabel1.configure(background="#d9d9d9")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(font="-family {DejaVu Sans} -size 9")
        self.TLabel1.configure(relief="flat")
        self.TLabel1.configure(text='''Tlabel''')
        photo_location = os.path.join(prog_location,
                                      "../../../../files/logo_text_250x100.png")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.TLabel1.configure(image=_img0)
        tooltip_font = "TkDefaultFont"
        ToolTip(self.TLabel1,
                tooltip_font,
                'Brought to you by the NIST Office of Data and Informatics',
                delay=0.25)

        self.TLabel2 = ttk.Label(top)
        self.TLabel2.place(relx=0.071, rely=0.333, height=16, width=300)
        self.TLabel2.configure(background="#d9d9d9")
        self.TLabel2.configure(foreground="#000000")
        self.TLabel2.configure(font="TkDefaultFont")
        self.TLabel2.configure(relief="flat")
        self.TLabel2.configure(anchor='center')
        self.TLabel2.configure(justify='center')
        self.TLabel2.configure(wraplength="250")
        self.TLabel2.configure(text='''A new session has been started for''')

        self.TButton1 = ttk.Button(top)
        self.TButton1.place(relx=0.357, rely=0.833, height=50, width=100)
        self.TButton1.configure(takefocus="")
        self.TButton1.configure(text='''End session''')
        tooltip_font = "TkDefaultFont"
        ToolTip(self.TButton1,
                tooltip_font,
                """Ending the session will close this window and trigger a record of the session to be built (don't click unless you're sure you've saved all your data!)""", delay=0.25)

        self.instrument_label = ttk.Label(top)
        self.instrument_label.place(relx=0.071, rely=0.411, height=16, width=300)
        self.instrument_label.configure(background="#d9d9d9")
        self.instrument_label.configure(foreground="#12649b")
        self.instrument_label.configure(font="TkDefaultFont")
        self.instrument_label.configure(relief="flat")
        self.instrument_label.configure(anchor='center')
        self.instrument_label.configure(justify='center')
        self.instrument_label.configure(wraplength="250")
        self.instrument_label.configure(text='''$INSTRUMENT''')
        self.instrument_label.configure(compound='center')

        self.TLabel3_2 = ttk.Label(top)
        self.TLabel3_2.place(relx=0.071, rely=0.478, height=16, width=300)
        self.TLabel3_2.configure(background="#d9d9d9")
        self.TLabel3_2.configure(foreground="#000000")
        self.TLabel3_2.configure(font="TkDefaultFont")
        self.TLabel3_2.configure(relief="flat")
        self.TLabel3_2.configure(anchor='center')
        self.TLabel3_2.configure(justify='center')
        self.TLabel3_2.configure(wraplength="250")
        self.TLabel3_2.configure(text='''at''')
        self.TLabel3_2.configure(compound='center')

        self.datetime_label = ttk.Label(top)
        self.datetime_label.place(relx=0.071, rely=0.544, height=16, width=300)
        self.datetime_label.configure(background="#d9d9d9")
        self.datetime_label.configure(foreground="#12649b")
        self.datetime_label.configure(font="TkDefaultFont")
        self.datetime_label.configure(relief="flat")
        self.datetime_label.configure(anchor='center')
        self.datetime_label.configure(justify='center')
        self.datetime_label.configure(wraplength="250")
        self.datetime_label.configure(text='''$DATETIME''')
        self.datetime_label.configure(compound='center')

        self.TLabel3_3 = ttk.Label(top)
        self.TLabel3_3.place(relx=0.071, rely=0.6, height=80, width=300)
        self.TLabel3_3.configure(background="#d9d9d9")
        self.TLabel3_3.configure(foreground="#000000")
        self.TLabel3_3.configure(font="TkDefaultFont")
        self.TLabel3_3.configure(relief="flat")
        self.TLabel3_3.configure(anchor='center')
        self.TLabel3_3.configure(justify='center')
        self.TLabel3_3.configure(wraplength="250")
        self.TLabel3_3.configure(text="""Leave this window open while you work!\n\nTo end the session (after all data has been saved to the network share), click below or close this window""")
        self.TLabel3_3.configure(compound='center')

# ======================================================
# Modified by Rozen to remove Tkinter import statements and to receive
# the font as an argument.
# ======================================================
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# ======================================================

from time import time, localtime, strftime


class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=1, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in miliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

# ===========================================================
#                   End of Class ToolTip
# ===========================================================

if __name__ == '__main__':
    vp_start_gui()





